#!/usr/bin/env bash
set -euo pipefail

URL_BASE="https://s3-ap-southeast-2.amazonaws.com/silo-open-data/Official/annual"
# URL=${URL_BASE}/{VARIABLE}/{YEAR}.{VARIABLE}.nc

START_YEAR=1889
END_YEAR=$(date +%Y)

LOG_LEVEL=2
SHOW_PROGRESS=0
LOG_FILE=""

ALL_VARS="daily_rain max_temp min_temp radiation rh_tmax rh_tmin"
VARS=""

START_TIME="$(date +%s)"

# End of line character for progress output.
# TODO: allow \r if stdout is a tty?
PROGRESS_EOL=$'\n'

# Whether to overwrite existing files.
OVERWRITE=0

# Whether to allow insecure connections.
ALLOW_INSECURE=0

################################################################################
# Parse command line arguments.
################################################################################

USAGE="Usage: ${0} <arguments>

<arguments>:
    -o|--out-dir <dir>      Output directory. Required.
    -l|--log-level <level>  Logging verbosity (0-4, default: 2).
    -p|--show-progress      Write progress to stdout.
    -s|--start-year <year>  Start year of data to download (default: ${START_YEAR})
    -e|--end-year <year>    End year of data to download (default: ${END_YEAR})
    -d|--debug              Enable debug mode (set -x).
    -f|--log-file <file>    Redirect all output to file.
    -v|--var <var>          The variable to be downloaded. May be specified
                            multiple times. Available variables: ${ALL_VARS}.
    -w|--overwrite          Overwrite existing files (default: skip existing
                            files).
    --allow-insecure        Allow insecure connections (default: reject
                            insecure connections)."

while [[ $# -gt 0 ]]
do
    case ${1} in
    -o|--out-dir)
        OUT_DIR="${2}"
        shift
        shift
        ;;
    -l|--log-level)
        LOG_LEVEL="${2}"
        shift
        shift
        ;;
    -p|--show-progress)
        SHOW_PROGRESS=1
        shift
        ;;
    -s|--start-year)
        START_YEAR="${2}"
        shift
        shift
        ;;
    -e|--end-year)
        END_YEAR="${2}"
        shift
        shift
        ;;
    -d|--debug)
        set -x
        shift
        ;;
    -f|--log-file)
        LOG_FILE="${2}"
        shift
        shift
        ;;
    -v|--var)
        VARS="${VARS} ${2}"
        shift
        shift
        ;;
    -w|--overwrite)
        OVERWRITE=1
        shift
        ;;
    --allow-insecure)
        ALLOW_INSECURE=1
        shift
        ;;
    *)
        echo "Unknown argument: ${1}"
        echo "${USAGE}"
        exit 1
        ;;
    esac
done

################################################################################
# Helper Functions
################################################################################

die() {
    echo "${0}: Error: $*" >&2
    exit 1
}

die_usage() {
    echo "${USAGE}" >&2
    echo >&2
    die "$*"
}

log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $*"
}

log_err() {
    if [ "${LOG_LEVEL}" -ge 0 ]; then log "ERR: $*"; fi
}

log_warn() {
    if [ "${LOG_LEVEL}" -ge 1 ]; then log "WRN: $*"; fi
}

log_info() {
    if [ "${LOG_LEVEL}" -ge 2 ]; then log "INF: $*"; fi
}

log_diag() {
    if [ "${LOG_LEVEL}" -ge 3 ]; then log "DIA: $*"; fi
}

log_debug() {
    if [ "${LOG_LEVEL}" -ge 4 ]; then log "DBG: $*"; fi
}

get_time_str() {
    local TIME=${1}
	local HOURS=$(echo "${TIME} / 3600" | bc)
	local MINUTES=$(echo "(${TIME} - ${HOURS} * 3600) / 60" | bc)
	local SECONDS=$(echo "${TIME} - ${HOURS} * 3600 - ${MINUTES} * 60" | bc)

	# If input is fractional, then SECONDS is likely to be fractional too.
	# Therefore we need to use a floating point format string in printf.
	printf "%02d:%02d:%02.0f" ${HOURS} ${MINUTES} ${SECONDS}
}

write_progress() {
    if [ "${SHOW_PROGRESS}" -eq 0 ]; then return; fi

    FRAC="${1}"
    ELAPSED="$(($(date +%s) - START_TIME))"
    PERCENT="$(echo "${FRAC} * 100" | bc)"
    DURATION="$(echo "${ELAPSED} / ${FRAC}" | bc)"
    REMAINING="$(echo "${DURATION} - ${ELAPSED}" | bc)"

    ELAPSED_STR="$(get_time_str "${ELAPSED}")"
    REMAINING_STR="$(get_time_str "${REMAINING}")"

    printf "Progress: %.2f%%; %s elapsed; %s remaining%s" \
        "${PERCENT}" "${ELAPSED_STR}" "${REMAINING_STR}" "${PROGRESS_EOL}"
}

################################################################################
# Input Validation
################################################################################

if [ -z "${OUT_DIR:-}" ]; then die_usage "Missing mandatory argument: -o|--out-dir"; fi
if [ -z "${START_YEAR:-}" ]; then die_usage "Missing mandatory argument: -s|--start-year"; fi
if [ -z "${END_YEAR:-}" ]; then die_usage "Missing mandatory argument: -e|--end-year"; fi

# Log level should be integer.
if ! [[ "${LOG_LEVEL}" =~ ^[0-9]+$ ]]; then die_usage "Invalid log level: ${LOG_LEVEL}"; fi

# Show progress should be boolean.
if [ "${SHOW_PROGRESS}" != 0 ] && [ "${SHOW_PROGRESS}" != 1 ]; then die_usage "Invalid show progress: ${SHOW_PROGRESS}"; fi

# Start and end years should be YYYY.
if ! [[ "${START_YEAR}" =~ ^[0-9]{4}$ ]]; then die_usage "Invalid start year: ${START_YEAR}"; fi
if ! [[ "${END_YEAR}" =~ ^[0-9]{4}$ ]]; then die_usage "Invalid end year: ${END_YEAR}"; fi

# Start year should be less than or equal to end year.
if [ "${START_YEAR}" -gt "${END_YEAR}" ]; then die_usage "Start year (${START_YEAR}) must be <= end year (${END_YEAR})"; fi

# Default to all variables if none are specified.
if [ -z "${VARS:-}" ]; then VARS="${ALL_VARS}"; fi

################################################################################
# Configuration
################################################################################

# Redirect all output to a log file if one is specified.
if [ -n "${LOG_FILE:-}" ]; then
    exec > "${LOG_FILE}" 2>&1
fi

WORK_DIR="${OUT_DIR}/tmp"

mkdir -p "${OUT_DIR}" "${WORK_DIR}"

CURL_OPTS="-L"

if [ "${LOG_LEVEL}" -ge 4 ]; then
    # Log level = DEBUG: enable verbose output from curl.
    CURL_OPTS="${CURL_OPTS} --verbose"
elif [ "${LOG_LEVEL}" -eq 3 ]; then
    CURL_OPTS="${CURL_OPTS} --no-progress-meter"
elif [ "${LOG_LEVEL}" -lt 3 ]; then
    # Log level < DIAG: disable progress output from curl.
    # (If log level is DIAG, we get default curl output)
    CURL_OPTS="${CURL_OPTS} --silent --show-error"
fi

if [ "${ALLOW_INSECURE}" -eq 1 ]; then
    CURL_OPTS="${CURL_OPTS} --insecure"
fi

# Get total number of files to download.
NVAR=$(echo "${VARS}" | wc -w)
NITER=$(( (END_YEAR - START_YEAR + 1) * ${NVAR} ))

################################################################################
# Main Script.
################################################################################

ITER=0
for VAR in ${VARS}
do
    log_info "Processing variable: ${VAR}..."

    # Directory into which this variable's files will be downloaded.
    VAR_DIR="${WORK_DIR}/${VAR}"
    mkdir -p "${VAR_DIR}"

    for YEAR in $(seq ${START_YEAR} ${END_YEAR})
    do
        ITER=$((ITER + 1))

        log_diag "Downloading year ${YEAR} of variable ${VAR}..."
        URL="${URL_BASE}/${VAR}/${YEAR}.${VAR}.nc"
        OUT_FILE="${VAR_DIR}/${YEAR}.${VAR}.nc"

        if [ -f "${OUT_FILE}" ]
        then
            if [ "${OVERWRITE}" -eq 0 ]; then
                log_diag "File ${OUT_FILE} already exists. Skipping."
                continue
            else
                log_diag "File ${OUT_FILE} already exists. Overwriting."
            fi
        fi

        curl ${CURL_OPTS} --output "${OUT_FILE}" "${URL}"
        PROGRESS=$(echo "1.0 * ${ITER} / ${NITER}" | bc -l)
        write_progress "${PROGRESS}"
    done # for YEAR in $(seq ${START_YEAR} ${END_YEAR})
done # for VAR in ${VARS}
