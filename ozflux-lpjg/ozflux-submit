#!/usr/bin/env bash
#
# Script to submit ozflux runs
#
# This is a really quick and dirty wrapper script which calls submit_to_gadi for
# each ozflux site. This should really be cleaned up a bit. 
#
# Usage: ${0} -s <config-file> [-d <ozflux-directory>] [-f <forcing-data>] [-n] [-h]
# 
# -s Path to the base configuration file, which contains config settings common
#    to all runs.
# -d Path to the directory containing ozflux sites. If omitted, will attempt to
#    use current working directory.
# -f Path to forcing data. If set, this data will be copied to the run directory,
# 	 and symlinks will be placed in each of the generated site directories. If
# 	 not set, the user/caller is responsible for organising the forcing data.
# -n Dry run. Create the run directories, but do not submit the jobs to PBS.
# -h Display this help info.
#
set -euo pipefail

# If environment variable DEBUG is set to 1, run in debug mode.
if [ "${DEBUG:-}" = 1 ]
then
  echo "Running in debug mode. Set DEBUG to 0 to disable."
  set -x
fi

### Input Handling.

# Parse the command line arguments
CONF=
DRY_RUN=0
FORCING_PATH=
USAGE="Usage: ${0} -s <config-file> [-d <ozflux-directory>] [-f <forcing-data>] [-n] [-h]

-s  Path to the base configuration file, which contains config settings common
    to all runs.
-d  Path to the directory containing ozflux sites. If omitted, will attempt to
    use current working directory.
-f	Path to forcing data. If set, this data will be copied to the run directory,
	and symlinks will be placed in each of the generated site directories. If
	not set, the user/caller is responsible for organising the forcing data.
-n	Dry run. Create the run directories, but do not submit the jobs to PBS.
-h  Display this help info."

while getopts ":s:d:hnf:" opt; do
    case $opt in
      s ) source "${OPTARG}"; CONF=1; CONFIG_FILE="${OPTARG}" ;;
      d ) SUBMIT_DIR="${OPTARG}" ;;
	  n ) DRY_RUN=1 ;;
	  f ) FORCING_PATH="${OPTARG}" ;;
      h ) echo "${USAGE}"; exit 0 ;;
    esac
done

if [ -z "${CONF:-}" ]
then
  echo "Error: no config file supplied."
  echo "${USAGE}"
  exit 1
elif [ ! -f "${CONFIG_FILE}" ]
then
	echo "Error: config file $f does not exist or is not readable"
	exit 1
fi

# Convert CONFIG_FILE to absolute path.
CONFIG_FILE="$(readlink -f "${CONFIG_FILE}")"

if [ -z "${SUBMIT_DIR:-}" ]
then
	echo "No ozflux directory provided, using current directory."
	SUBMIT_DIR="$(pwd)"
elif [ ! -d "${SUBMIT_DIR}" ]
then
	echo "Error: directory ${SUBMIT_DIR} does not exist or is not readable."
	exit 1
else
	# Convert to absolute path if necessary.
	SUBMIT_DIR="$(readlink -f "${SUBMIT_DIR}")"
fi

if [ -z "${OUT_DIR:-}" ]
then
	echo "Error: config file must contain OUT_DIR"
	exit 1
fi

# OUT_DIR was set when we sourced the base config file.
mkdir -p "${OUT_DIR}"

if [ -n "${FORCING_PATH}" ]
then
	if [ ! -d "${FORCING_PATH}" ]
	then
		echo "Error: Forcing path ${FORCING_PATH} does not exist or is not readable"
		exit 1
	else
		# Copy forcing data into ${OUT_DIR}/
		# Let's be explicit here, in case, for example, the user passed a directory
		# name ending with a trailing slash.
		FORCING_DEST="${OUT_DIR}/$(basename "${FORCING_PATH}")"
		rsync -zaq --partial "${FORCING_PATH}"/* "${FORCING_DEST}/"
	fi
fi

### Generate run directories and (potentially) submit PBS jobs.
for SITE_DIR in `find "${SUBMIT_DIR}" -maxdepth 1 -type d`
do
	# Extract site name.
	SITE="$(basename "${SITE_DIR}")"

	# Path to insfile must match directory name.
	INSFILE="${SITE_DIR}/${SITE}.ins"

	# Ignore directories like forcing/ and ./
	if [ ! -f "${INSFILE}" ]; then continue; fi

	# ::TEMP HACK::
	# Change path to met data to use 3-hourly data.
	# sed -ri 's/num 24/num 8/g' "${INSFILE}"

	EXPERIMENT="${SITE}"

	# Create site run config file.
	SITE_CONF="$(mktemp --tmpdir --suffix=.conf "${SITE}XXX")"

	# Insert site-specific settings.
	cat <<EOF > "${SITE_CONF}"
## Path to ins file from run directory. Can be absolute or relative.
## ${SUBMIT_DIR} is the directory of the submit script.
INSFILE="${INSFILE}"

## Experiment name. Outputs will be saved to a directory with this name.
EXPERIMENT="${EXPERIMENT}"

## PBS Job name.
JOB_NAME="${EXPERIMENT}"
EOF

	# Append the other settings which are common to all sites.
	cat "${CONFIG_FILE}" >>"${SITE_CONF}"

	pushd "${SITE_DIR}" >/dev/null 2>&1
	DRY_RUN_ARG=
	if [ "${DRY_RUN}" = "1" ]; then DRY_RUN_ARG="-d"; fi
	submit_to_gadi.sh -s "${SITE_CONF}" "${DRY_RUN_ARG}"
	popd >/dev/null 2>&1
	rm "${SITE_CONF}"

	# Create symlink to forcing data in the runs directory.
	RUNS_DIR="${OUT_DIR}/${SITE}/${RUNS}"
	if [ -f "${RUNS_DIR}" -a -n "${FORCING_PATH}" ]
	then
		ln -sf "${FORCING_DEST}" "${RUNS_DIR}/"
	fi

done
