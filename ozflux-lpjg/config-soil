#!/usr/bin/env python
#
# This is a python script which will modify a soils.nc file to be used
# by the LSM version of LPJ-Guess. It will set the lpj code and colour
# code for the point closest to the specified latitude and longitude.
#

import argparse, datetime, glob, netCDF4, os, ozflux_logging, shutil, sys, traceback
from io import TextIOWrapper

class SoilConfigOptions:
	"""
	Class for storing CLI options.
	"""
	def __init__(self, file: str, lat: float, lon: float, lcode: int, ccode: int
	, log_level: ozflux_logging.LogLevel
	#, out_file: str, in_place: bool
	):
		self.file = file
		self.latitude = lat
		self.longitude = lon
		self.lpjg_code = lcode
		self.colour_code = ccode
		# self.out_file = out_file
		# self.in_place = in_place
		self.log_level = log_level

VAR_LAT = "lat"
VAR_LON = "lon"
VAR_LPJ_CODE = "lpj_code"
VAR_COLOUR_CODE = "color_code" # Note: American spelling intentional
EPS = 1e-16 # Floating point tolerance
RESOLUTION_LON = 360 * 4
LON_0 = -179.75
LAT_0 = -89.75

def floats_equal(x: float, y: float) -> bool:
	"""
	Return true iff two floats are equal (or very close).
	"""
	return abs(x - y) < EPS

def index_of(x: float, arr: list[float]) -> int:
	"""
	Return the index of x in the array, or -1 if not found.
	"""
	for i in range(len(arr)):
		if (floats_equal(x, float(arr[i]))):
			return i
	return -1

def get_index(nc: netCDF4.Dataset, lat: float, lon: float) -> tuple[float, float]:
	"""
	Get the indices of the latitude and longitude in the specified dataset.
	"""
	ilat = round( (lat - LAT_0) * 2)
	ilon = round( (lon - LON_0) * 2)
	return (ilat, ilon)

def modify(filename: str, lon: float, lat: float, lcode: int, ccode: int):
	"""
	Modify the soils.nc file in-place.
	"""
	with netCDF4.Dataset(filename, "r+", format="NETCDF4") as nc:
		(ilat, ilon) = get_index(nc, lat, lon)
		var_lcode = nc.variables[VAR_LPJ_CODE]
		var_lcode[ilon][ilat] = lcode

		var_ccode = nc.variables[VAR_COLOUR_CODE]
		var_ccode[ilon][ilat] = ccode

def main(opts: SoilConfigOptions):
	"""
	Main function.
	"""
	modify(opts.file, opts.longitude, opts.latitude, opts.lpjg_code
	, opts.colour_code)

def cli_epilog() -> str:
	"""
	Return the CLI epilog, which is the extra description text displayed
	after argument info, when the program is run with --help argument.
	"""
	return """
LPJ-Guess code is used to determine most of the soil properties:


| LPJG Code | Description        |
|-----------|--------------------|
| 1         | Coarse             |
| 2         | Medium             |
| 3         | Fine               |
| 4         | Medium-coarse      |
| 5         | Fine-coarse        |
| 6         | Fine-medium        |
| 7         | Fine-medium-coarse |
| 8         | Organic            |
| 9         | Vertisol           |

Colour code is used to determine the soil albedo. For more info, see:
Oleson et al. (2010) - Technical Description of version 4.0 of the CLM (p. 38)

| Colour Code |     DRY     |     SAT     |
|             | vis  | nir  | vis  | nir  |
|-------------|------|------|------|------|
| 1           | 0.36 | 0.61 | 0.25 | 0.50 |
| 2           | 0.34 | 0.57 | 0.23 | 0.46 |
| 3           | 0.32 | 0.53 | 0.21 | 0.42 |
| 4           | 0.31 | 0.51 | 0.20 | 0.40 |
| 5           | 0.30 | 0.49 | 0.19 | 0.38 |
| 6           | 0.29 | 0.48 | 0.18 | 0.36 |
| 7           | 0.28 | 0.45 | 0.17 | 0.34 |
| 8           | 0.27 | 0.43 | 0.16 | 0.32 |
| 9           | 0.26 | 0.41 | 0.15 | 0.30 |
| 10          | 0.25 | 0.39 | 0.14 | 0.28 |
| 11          | 0.24 | 0.37 | 0.13 | 0.26 |
| 12          | 0.23 | 0.35 | 0.12 | 0.24 |
| 13          | 0.22 | 0.33 | 0.11 | 0.22 |
| 14          | 0.20 | 0.31 | 0.10 | 0.20 |
| 15          | 0.18 | 0.29 | 0.09 | 0.18 |
| 16          | 0.16 | 0.27 | 0.08 | 0.16 |
| 17          | 0.14 | 0.25 | 0.07 | 0.14 |
| 18          | 0.12 | 0.23 | 0.06 | 0.12 |
| 19          | 0.10 | 0.21 | 0.05 | 0.10 |
| 20          | 0.08 | 0.16 | 0.04 | 0.08 |
"""

def parse_args(args: list[str]) -> SoilConfigOptions:
	"""
	Parse CLI arguments.
	"""
	desc = "Modify soils.nc: set lpj-code and colour-code for a specific gridpoint"
	parser = argparse.ArgumentParser(args[0], description = desc
	, epilog = cli_epilog(), formatter_class = argparse.RawDescriptionHelpFormatter)
	parser.add_argument("-v", "--verbosity", type = int, nargs = "?", default = ozflux_logging.LogLevel.INFORMATION, help = "Logging verbosity (1-5, default 3)")
	parser.add_argument("-f", "--file", type = str, required = True, action = "store", help = "Path to the existing soils.nc file")
	#group = parser.add_mutually_exclusive_group()
	#group.add_argument("-i", "--in-place", action = "store_true", help = "True to edit the existing file in-place. Mutually exclusive with --out-file.")
	#group.add_argument("-o", "--out-file", type = str, action = "store", help = "Path to the existing soils.nc file")
	parser.add_argument("-l", "--lon", type = float, required = True, help = "Longitude of the grid point to be modified")
	parser.add_argument("-a", "--lat", type = float, required = True, help = "Latitude of the grid point to be modified")
	parser.add_argument("-c", "--colour-code", type = int, required = True, help = "Colour code of the grid point (1-20)")
	parser.add_argument("-j", "--lpjg-code", type = int, required = True, help = "LPJ-Guess code of the grid point (1-9)")
	result = parser.parse_args(args[1:])

	# Validation
	if result.lpjg_code < 1 or result.lpjg_code > 9:
		m = "LPJ-Guess Code must be in range [1, 9] but was: %d"
		raise ValueError(m % result.lpjg_code)
	if result.colour_code < 1 or result.colour_code > 20:
		m = "Colour code must be in range [1, 20] but was: %d"
		raise ValueError(m % result.colour_code)
	if result.lon < -180 or result.lon > 180:
		m = "Longitude must be in range [-180, 180] but was: %.2f"
		raise ValueError(m % result.lon)
	if result.lat < -90 or result.lat > 90:
		m = "Latitude must be in range [-90, 90] but was: %.2f"
		raise ValueError(m % result.lat)

	return SoilConfigOptions(result.file, result.lat, result.lon
	, result.lpjg_code, result.colour_code, result.verbosity
	#, result.out_file, result.in_place
	)

if __name__ == "__main__":
	# Parse CLI args
	opts = parse_args(sys.argv)

	# todo: rethink logging
	ozflux_logging.global_log_level = opts.log_level
	try:
		# Actual logic is in main().
		main(opts)
	except BaseException as error:
		# Basic error handling.
		ozflux_logging.log_error(traceback.format_exc())
		exit(1)



